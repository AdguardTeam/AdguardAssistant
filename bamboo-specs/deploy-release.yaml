---
version: 2
deployment:
  name: legacy assistant - deploy release
  source-plan: ADGEXT-LEGASSRELEASESPECS
release-naming: ${bamboo.userscriptMeta.version}
environments:
  - userscripts.adtidy.org
  - npmjs
userscripts.adtidy.org:
  triggers: []
  tasks:
    - clean
    - checkout:
        repository: bamboo-deploy-publisher
        path: bamboo-deploy-publisher
        force-clean-build: 'false'
    - artifact-download:
        artifacts:
          - {}
    - script:
        interpreter: SHELL
        scripts:
          - |-
            set -x
            set -e
            ls -la

            ./bamboo-deploy-publisher/deploy.sh adguard-assistant-release
  final-tasks: []
  variables: {}
  requirements:
    - adg-docker: 'true'
  notifications:
    - events:
        - deployment-started-and-finished
      recipients:
        - webhook:
            name: Deploy webhook
            url: http://prod.jirahub.service.eu.consul/v1/webhook/bamboo?channel=adguard-qa
npmjs:
  docker:
    image: adguard/node-ssh:14.18--0
    volumes:
      ${system.YARN_DIR}: "${bamboo.cacheYarn}"
  triggers: [ ]
  tasks:
    - checkout:
        force-clean-build: 'true'
    - script:
        interpreter: SHELL
        scripts:
          - |-
            set -e
            set -x

            yarn install ${bamboo.varsYarn}

            ls -la

            yarn release

            export NPM_TOKEN=${bamboo.npmSecretToken}
            echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
            npm publish --access public

            # cleanup
            rm -rf node_modules
  requirements:
    - adg-docker: 'true'
  notifications:
    - events:
        - deployment-started-and-finished
      recipients:
        - webhook:
            name: Deploy webhook
            url: http://prod.jirahub.service.eu.consul/v1/webhook/bamboo?channel=adguard-qa
